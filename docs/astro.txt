 
See the files in python/astro.
The algorithms in "Jean Meeus: Astronomical Algorithms 2nd Ed." were programmed.
The code computes planetary positions, Asc, MC and housesystems for the given date, time and place.

Execute it on Linux:
python3 ./test.py

In ZFOS, fthsrc/astro/astro.txt: 
Fixed Point Decimal.
Currently the positions of the Sun, Moon, Mercury, Venus, Mars, Jupiter, Saturn, the ascending node of the Moon, the Ascendant and the MC (Medium Coeli, i.e. the local Meridian) are computed.
Every value is stored as Q6 (i.e. 6 digits after the decimal point), however intermediate calculations many times use higher precision.
Q6 was chosen to fit into a CELL (e.g. 239.436712 fits into 32bits).
Simplified nutation and obliquity are computed.
fthsrc/astro/astro.txt uses pldata.txt. 
pldata.txt contains the data of the orbits of the planets.
The columns are: A(DCELL) B(CELL) C(DCELL) fBandC(Byte)
A DCELL is stored as two CELLs: low 32bits first then the high 32bits.
fBandC is a byte that tells us how many fractional digits B and C have, each.
Sometimes a zero had to be appended to B or C in order to have the same digits after the dot.

Precision: unfortunately there is a few arcseconds (max. 30 I have seen so far, and it was for the Moon, the other planets have less) 
difference compared to the results of the python version.
To have better precision:
- program the complicated versions of nutation and obliquity 
- use Chebyshev polinoms for approximation (sine, ...)
- use QCELLs (see forth/quad.asm, but it is not finished)

During testing it turned out that there was an overflow in case of the longitude of Mercury:
subval*math.pow(T, i)  // this overflows in case of i=1 in ZFOS (subval is too big to be multiplied by T)
To fix this, in SUMTERMS we truncate dSubVal to Q4 from Q6, also DVAL to Q4, and at the end of SUMTERMS the result back to Q6.

In case there is still an overflow somewhere ( i.e. incorrect longitude), we can try to truncate dSubVal to Q2 an DVAL too.
Testing it, shows that the results are the same as that of Q4 
(at the end the algorithm divides the result by 10^8 to get the longitude or latitude).

A problem: for July 1, 1951 JDE is different from a commercial software that uses a well known ephemeris.
However both JD and deltaT seems to be correct (Meeus, python-code and ZFOS). 
I have checked JD several ways (e.g. with a julian day calculator, Internet), 
and deltaT comes from a table and its value is about 30 seconds.
JD = 2433829.0  (ok: the commercial software, Meeus(python-code, ZFOS), JD-calculator-Internet)
JDE = 2433829.0003 (Meeus(python-code, ZFOS))  vs  JDE = 2433829.125 (commercial software)
This means that deltaT is different. I can't check the deltaT of the commercial software.
JDE = JD+deltaT/86400 

After loading pldata.txt and astro.txt, execute TEST to see Einstein's chart.

