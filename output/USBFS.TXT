( USBFAT32)
: USBFS ;   ( marker for FORGET)

HEX 

( : KEY? KEYW DISCARD DROP ; )

04F0000 CONSTANT USBFSPATHBUFF 
04F2000 CONSTANT USBFSLFNNAMEBUFF 
04F3000 CONSTANT USBFSSECTBUFF 
04F4000 CONSTANT USBFSCLUSBUFF 

7 CONSTANT USBFSMAXDIRDEPTH 

02F CONSTANT USBFSROOTDIRCHAR 
02F CONSTANT USBFSPATHSEPACHAR 
02F CONSTANT USBFSDATESEPACHAR 
058 CONSTANT USBFSUNICODESUBSCHAR 

VARIABLE USBFSPARTLBABEG
VARIABLE USBFSPARTSECTCNT

VARIABLE USBFSBYTESPERSECT
VARIABLE USBFSSECTPERCLUS
VARIABLE USBFSRESSECTCNT
VARIABLE USBFSFATCNT

VARIABLE USBFSSECTPERFAT
VARIABLE USBFSROOTDIRCLUS
VARIABLE USBFSFSINFOSECT
VARIABLE USBFSBOOTSECTCP

VARIABLE USBFSMAXCLUSCNTPERWORD
VARIABLE USBFSFATBEGLBA
VARIABLE USBFSCLUSBEGLBA
VARIABLE USBFSROOTDIRLBA

VARIABLE USBFSDIRENTRIESPERCLUS

VARIABLE USBFSNAMEENTRIESCNT
VARIABLE USBFSINITED

CREATE USBFSDIRCLUSTERS USBFSMAXDIRDEPTH CELLS ALLOT 
VARIABLE USBFSDIRCNT
CREATE USBFSSFNBUFF 0D ALLOT 
CREATE USBFSNAMEBUFF 0100 ALLOT 
VARIABLE USBFSCURRSECTNUM

VARIABLE USBFSFREECLUSCNT
VARIABLE USBFSNFREECLUSNUM

: USBFSCHKPARTTYPE  ( -- flag )
   USBFSSECTBUFF 01BE + 4 + C@ DUP 0<> 
   IF DUP 0B = SWAP 0C = OR 
   ELSE DROP TRUE 
   THEN ;

: USBFSCLUS2LBA  ( clusNum -- lba )
   2- USBFSSECTPERCLUS @ * USBFSCLUSBEGLBA @ + ;

: USBFSREADFSINFO  ( -- flag )
   USBFSPARTLBABEG @ USBFSFSINFOSECT @ + DUP 0 USBFSSECTBUFF 1 USBREAD INVERT 
   IF DROP FALSE CR ." Disk read error. " EXIT THEN  
   USBFSCURRSECTNUM ! 
   USBFSSECTBUFF @ 041615252 <> IF FALSE EXIT THEN 
   USBFSSECTBUFF 01E4 + @ 061417272 <> IF FALSE EXIT THEN 
   USBFSSECTBUFF 01FC + @ 0AA550000 <> IF FALSE EXIT THEN 
   USBFSSECTBUFF 01E8 + @ USBFSFREECLUSCNT ! 
   USBFSSECTBUFF 01EC + @ DUP FFFFFFFF = 
   IF USBFSNFREECLUSNUM ! TRUE 
   ELSE DUP USBFSSECTPERFAT @ 7 LSHIFT U>= IF DROP FALSE ELSE USBFSNFREECLUSNUM ! TRUE THEN 
   THEN ;

: USBFSINITSUB  ( -- flag )
   FALSE USBFSINITED ! 0 USBFSDIRCNT ! -1 USBFSCURRSECTNUM !
   FFFFFFFF USBFSFREECLUSCNT ! FFFFFFFF USBFSNFREECLUSNUM !
   0 0 USBFSSECTBUFF 1 USBREAD INVERT 
   IF FALSE CR ." Disk read error. " EXIT THEN
   USBFSCHKPARTTYPE INVERT IF FALSE CR ." Partition-type is not FAT32. " THEN 
   USBFSSECTBUFF 01BE + 8 + DUP @ USBFSPARTLBABEG ! 
   4 + @ USBFSPARTSECTCNT ! 
   USBFSPARTLBABEG @ 0<> 
   IF 
     USBFSPARTLBABEG @ 0 USBFSSECTBUFF 1 USBREAD INVERT 
     IF FALSE CR ." Disk read error. " EXIT THEN
   THEN 
   USBFSSECTBUFF 0B + W@ USBFSBYTESPERSECT ! 
   USBFSSECTBUFF 0D + C@ USBFSSECTPERCLUS ! 
   USBFSSECTBUFF 0E + W@ USBFSRESSECTCNT ! 
   USBFSSECTBUFF 10 + C@ USBFSFATCNT ! 
   USBFSSECTBUFF 024 + @ USBFSSECTPERFAT ! 
   USBFSSECTBUFF 02C + @ USBFSROOTDIRCLUS ! 
   USBFSSECTBUFF 030 + W@ USBFSFSINFOSECT ! 
   USBFSSECTBUFF 032 + W@ USBFSBOOTSECTCP ! 
   0100 USBFSMAXCLUSCNTPERWORD !
   USBFSBYTESPERSECT @ 0200 = 
   USBFSFATCNT @ 2 = 
   USBFSSECTBUFF 01FE + W@ 0AA55 = AND AND INVERT
   IF FALSE CR ." Invalid FAT32. " EXIT THEN 
   USBFSROOTDIRCLUS @ USBFSDIRCLUSTERS ! 
   USBFSROOTDIRCHAR USBFSPATHBUFF C! 0 USBFSPATHBUFF 1+ C! 
   USBFSPARTLBABEG @ USBFSRESSECTCNT @ + DUP USBFSFATBEGLBA ! 
   USBFSFATCNT @ USBFSSECTPERFAT @ * + USBFSCLUSBEGLBA !
   USBFSROOTDIRCLUS @ USBFSCLUS2LBA USBFSROOTDIRLBA !
   USBFSSECTPERCLUS @ 4 LSHIFT USBFSDIRENTRIESPERCLUS ! 
   USBFSREADFSINFO IF TRUE USBFSINITED ! ELSE CR ." Read FSInfo error. " THEN 
   USBFSINITED @ ;

: USBFSREADFAT  ( lba -- flag )
   DUP USBFSCURRSECTNUM @ = IF DROP TRUE EXIT THEN 
   DUP USBFSFATBEGLBA @ + 0 USBFSSECTBUFF 1 USBREAD 
   IF USBFSCURRSECTNUM ! TRUE 
   ELSE DROP FALSE CR ." FAT read error. " 
   THEN ; 

: USBFSREADCLUS  ( lba -- flag )
   0 USBFSCLUSBUFF USBFSSECTPERCLUS @ USBREAD ;

: USBFSREADCURRDIR  ( -- clusnum flag )
   USBFSDIRCNT @ DUP 0= 
   IF DROP USBFSROOTDIRCLUS @ USBFSROOTDIRLBA @ 
   ELSE CELLS USBFSDIRCLUSTERS + @ DUP USBFSCLUS2LBA 
   THEN USBFSREADCLUS ;

: USBFSSTRLEN  ( addr -- len )
   020 0 DO DUP C@ 0= IF DROP I UNLOOP EXIT THEN 1+ LOOP DROP 0 ;

: USBFSCPLFN  ( addr -- )
   DUP C@ 0F AND 1- 01A * USBFSLFNNAMEBUFF + >R DUP 1+ R@ 0A CMOVE 
   DUP 0E + R> 0A + DUP >R 0C CMOVE 
   01C + R> 0C + 4 CMOVE 1 USBFSNAMEENTRIESCNT +! ;

: USBFSPRLFN  ( -- )
   USBFSLFNNAMEBUFF 01A 2/ USBFSNAMEENTRIESCNT @ * 0 
   DO 
     DUP W@ 0= IF LEAVE THEN 
     DUP C@ OVER 1+ C@ 0<> 
     IF DROP USBFSUNICODESUBSCHAR THEN 
     EMIT 2+ 
   LOOP DROP 020 EMIT ; 

: USBFSCPSFN  ( addr -- )
   USBFSSFNBUFF 8 0 DO OVER I + C@ DUP 020 = IF DROP LEAVE THEN OVER C! 1+ LOOP 
  ( addr sfnbuff+ )
   SWAP 8 + SWAP 
   OVER C@ 020 <> 
   IF 
     02E OVER C! 1+ 
  ( addr+8 sfnbuff+ )
     3 0 DO OVER I + C@ DUP 020 = 
           IF DROP LEAVE THEN OVER C! 1+ 
         LOOP 
   THEN 
   NIP 0 SWAP C! ;

: USBFSPRSFN  ( -- )
   USBFSSFNBUFF DUP USBFSSTRLEN TYPE SPACE ;

( prints no space after number, unlike dot )
: USBFSPRNSP  ( n -- )
   S>D <# #S #> TYPE ;

: USBFSPRDATE  ( addr offs -- )
   2DUP + W@ 9 RSHIFT 07BC + USBFSPRNSP USBFSDATESEPACHAR EMIT 
   2DUP + W@ 01E0 AND 5 RSHIFT USBFSPRNSP USBFSDATESEPACHAR EMIT 
   + W@ 01F AND USBFSPRNSP 020 EMIT ;

: USBFSGNCLUSNUM  ( clusNum -- nextClusNum TRUE ) ( clusNum -- FALSE )
   CLRTICKS DUP 7 RSHIFT USBFSREADFAT  
   IF 07F AND 2 LSHIFT USBFSSECTBUFF + @ TRUE
   ELSE DROP FALSE 
   THEN ; 

: USBFSINCENTRY  ( clusNum addrEntry -- clusNum addrNEntry TRUE ) ( clusNum addrEntry -- FALSE )
     020 + DUP USBFSCLUSBUFF - 5 RSHIFT USBFSDIRENTRIESPERCLUS @ U<
     IF TRUE 
     ELSE 
       DROP USBFSGNCLUSNUM 
  ( nextClusNum TRUE )  ( FALSE )
       IF  
         DUP 0FFFFFF7 U>= IF 0 TRUE EXIT THEN 
         DUP USBFSCLUS2LBA USBFSREADCLUS 
         IF USBFSCLUSBUFF TRUE  
         ELSE DROP FALSE CR ." Read cluster error. " 
         THEN 
       ELSE FALSE CR ." Get next cluster number error. " 
       THEN 
     THEN ;

: USBFSCPNAME  ( caddr -- )
   DUP C@ >R 1+ USBFSNAMEBUFF R@ CMOVE 0 USBFSNAMEBUFF R> + C! ;

: USBFSTRUNCNAME  ( len -- len2 )
   DUP USBFSNAMEBUFF + 1- SWAP 0 
   DO DUP C@ DUP 02E = SWAP 020 = OR 
      IF 0 OVER C! ELSE LEAVE THEN 1-
   LOOP USBFSNAMEBUFF - 1+ ;

: USBFSTOUPPER  ( c -- C )
   DUP 061 U>= OVER 07A U<= AND IF 020 - THEN ;

: USBFSUNISTRLEN  ( waddr maxcharcnt -- len )
   0 DO DUP W@ 0= IF DROP I UNLOOP EXIT THEN 2+ LOOP DROP 0 ;

: USBFSCMPLFN   ( -- flag )
   USBFSLFNNAMEBUFF 0D USBFSNAMEENTRIESCNT @ * USBFSUNISTRLEN 
   USBFSNAMEBUFF USBFSSTRLEN =
   IF 
     USBFSLFNNAMEBUFF USBFSNAMEBUFF 
     BEGIN 
       DUP C@ 0= IF 2DROP TRUE EXIT THEN
       OVER 1+ C@ 0= 
       IF OVER C@ 07E U<= 
         IF 2DUP C@ SWAP C@ <> 
            IF 2DROP FALSE EXIT THEN 
         THEN 
       THEN 
       1+ SWAP 2+ SWAP 
     AGAIN
   ELSE FALSE
   THEN ;

: USBFSSTRCMP  ( addr1 addr2 len -- flag )
   0 
   DO 
     2DUP C@ USBFSTOUPPER SWAP C@ USBFSTOUPPER <> 
     IF 2DROP FALSE UNLOOP EXIT THEN 1+ SWAP 1+ SWAP 
   LOOP 2DROP TRUE ;

: USBFSCMPSFN  ( -- flag )
   USBFSSFNBUFF USBFSSTRLEN DUP USBFSNAMEBUFF USBFSSTRLEN =
   IF USBFSSFNBUFF USBFSNAMEBUFF ROT USBFSSTRCMP
   ELSE DROP FALSE
   THEN ;

: USBFSGCONSECCLUSCNT  ( clusNum -- nextClusNum cnt TRUE )  ( clusNum -- FALSE )
   DUP 0 >R 
   BEGIN 
     USBFSGNCLUSNUM INVERT IF R> 2DROP FALSE EXIT THEN 
     R> 1+ >R 
    ( clusNum nextClusNum )   ( R: cnt )
     DUP 0FFFFFF7 U>= IF NIP R> TRUE EXIT THEN 
     R@ USBFSMAXCLUSCNTPERWORD @ = IF NIP R> TRUE EXIT THEN 
    ( clusNum nextClusNum )   ( R: cnt )
     OVER R@ + OVER <> IF NIP R> TRUE EXIT THEN 
   AGAIN ;

: USBFSRDFL  ( memaddr clusNum -- flag )
   BEGIN 
     DUP USBFSGCONSECCLUSCNT INVERT 
     IF 2DROP FALSE CR ." Get count of consecutive clusters error. " EXIT THEN 
    ( memaddr fileclusnum clusNext cnt )
	 2>R USBFSCLUS2LBA OVER 0 SWAP R> USBFSSECTPERCLUS @ * DUP >R 
    ( memaddr labLo 0 memaddr sectcnt )  ( R: clusNext sectcnt )
     USBREAD INVERT 2R> ROT 
     IF DROP 2DROP FALSE CR ." Disk read error. " EXIT THEN
    ( memaddr clusNext sectcnt )
     USBFSBYTESPERSECT @ * ROT + SWAP 
     CLRTICKS 
    ( memaddr+ clusNext )
     DUP 0FFFFFF7 U>=  
   UNTIL 2DROP TRUE ;

( *** Public words ***)

: USBFSINIT  ( devaddr -- lbalo lbahi sectsize flag )
   DUP 0 USBDEVINFO 
   IF USBINITMSD IF USBFSINITSUB ELSE FALSE THEN
   ELSE DROP FALSE 
   THEN ;

: USBFSINFO  ( -- flag )
   USBFSINITED @ 
   IF 
     CR ." FSInfo:" 
     CR ." FAT begin LBA: " USBFSFATBEGLBA ? 
     CR ." Sectors per FAT: " USBFSSECTPERFAT ?
     CR ." Clusters begin LBA: " USBFSCLUSBEGLBA ? 
     CR ." Sectors per cluster: " USBFSSECTPERCLUS ? 
     CR ." Free clusters count: " USBFSFREECLUSCNT ? 
     CR ." Most recently allocated clusternum: " USBFSNFREECLUSNUM ? 
     CR TRUE 
   ELSE FALSE CR ." FS not inited error. " 
   THEN ; 

: USBFSLS  ( flagLongList -- flag )
   USBFSINITED @ INVERT 
   IF DROP FALSE CR ." FS not inited error. " EXIT THEN 
   -1 USBFSCURRSECTNUM ! USBFSREADCURRDIR INVERT 
   IF 2DROP FALSE CR ." Read current directory error. " EXIT THEN 
  ( flagLongList clusnum )
   CR USBFSCLUSBUFF 
  ( flagLongList clusnum addrEntry )
   BEGIN
     DUP C@ 0= IF DROP 2DROP TRUE EXIT THEN 
     DUP C@ 0E5 <> 
     IF 
       DUP 0B + C@ 0F <>
     ( flagLongList clusnum addrEntry flag )
       IF 
         USBFSNAMEENTRIESCNT @ 0= 
         IF DUP USBFSCPSFN USBFSPRSFN
         ELSE USBFSPRLFN 0 USBFSNAMEENTRIESCNT ! 
         THEN
      ( flagLongList clusnum addrEntry )
         2>R DUP 2R> ROT
         IF 
           DUP 0B + C@ 010 AND 0<> IF ." d " THEN 
           DUP 012 USBFSPRDATE DUP 018 USBFSPRDATE 
           DUP 01C + ? CR 
         THEN 
       ELSE 
         DUP C@ 6 AND 0<> IF 0 USBFSNAMEENTRIESCNT ! THEN 
         DUP USBFSCPLFN 
       THEN 
     THEN 
    ( flagLongList clusNum addrEntry )
     USBFSINCENTRY 
     IF 
       DUP 0= IF DROP 2DROP TRUE EXIT THEN 
     ELSE DROP FALSE EXIT 
     THEN 
   AGAIN ;

: USBFSCD  ( -- flag )
   022 WORD 
   USBFSINITED @ INVERT 
   IF DROP FALSE CR ." FS not inited error. " EXIT THEN 
   -1 USBFSCURRSECTNUM !
   USBFSDIRCNT @ USBFSMAXDIRDEPTH U>= IF DROP FALSE EXIT THEN 
  ( caddr )
   DUP C@ 1 = 
   IF 
     DUP 1+ C@ 02E = IF DROP TRUE EXIT THEN 
     DUP 1+ C@ USBFSROOTDIRCHAR = IF DROP 0 USBFSDIRCNT ! TRUE EXIT THEN 
   THEN 
   DUP C@ 2 = 
   IF 
     DUP 1+ C@ 02E = OVER 2+ C@ 02E = AND 
     IF 
       USBFSDIRCNT @ 0= 
       IF DROP FALSE EXIT 
       ELSE -1 USBFSDIRCNT +! DROP TRUE EXIT 
       THEN 
     THEN 
   THEN
   DUP C@ SWAP USBFSCPNAME USBFSTRUNCNAME 
  DROP
  ( empty )
   USBFSREADCURRDIR INVERT 
   IF DROP FALSE CR ." Read current directory error. " EXIT THEN 
  ( clusnum )
   USBFSCLUSBUFF 
  ( clusnum addrEntry )
   BEGIN
     DUP C@ 0= IF 2DROP FALSE EXIT THEN 
     DUP C@ 0E5 <> 
     IF 
       DUP 0B + C@ 0F <>
     ( clusnum addrEntry flag )
       IF ( SFN)
         DUP 0B + C@ 010 AND 0<> 
         IF 
           USBFSNAMEENTRIESCNT @ 0= 
           IF DUP USBFSCPSFN USBFSCMPSFN 
           ELSE USBFSCMPLFN 
           THEN
           0 USBFSNAMEENTRIESCNT ! 
           IF
            ( clusnum addrEntry )
             USBFSNAMEBUFF 0100 USBFSDIRCNT @ 1+ * USBFSPATHBUFF + DUP >R 
             USBFSNAMEBUFF USBFSSTRLEN 1+ DUP >R CMOVE 0 2R> + C! ( 1+!?)
            ( clusnum addrEntry )
             DUP 014 + @ 010 LSHIFT OVER 01A + @ OR 0FFFFFFF AND 
             1 USBFSDIRCNT +! USBFSDIRCNT @ 2 LSHIFT USBFSDIRCLUSTERS + ! 
             2DROP TRUE EXIT 
           THEN 
         THEN 
       ELSE 
         DUP C@ 6 AND 0<> IF 0 USBFSNAMEENTRIESCNT ! THEN 
         DUP USBFSCPLFN 
	   THEN 
     THEN 
    ( clusNum addrEntry )
     USBFSINCENTRY 
     IF 
       DUP 0= 
       IF 2DROP TRUE EXIT THEN 
     ELSE FALSE EXIT 
     THEN 
   AGAIN ;

: USBFSPWD  ( -- flag )
   USBFSINITED @ INVERT 
   IF FALSE CR ." FS not inited error. " EXIT THEN 
   CR USBFSPATHBUFF USBFSDIRCNT @ 1+ 0 
   DO DUP DUP USBFSSTRLEN TYPE I 0<> IF USBFSPATHSEPACHAR EMIT THEN 0100 + 
   LOOP DROP TRUE CR ; 

: USBFSREAD  ( memaddr -- len flag ) 
   022 WORD 
   USBFSINITED @ INVERT 
   IF 2DROP FALSE CR ." FS not inited error. " EXIT THEN 
   -1 USBFSCURRSECTNUM !
   USBFSCPNAME 
  ( memaddr )
   USBFSREADCURRDIR INVERT 
   IF 2DROP FALSE CR ." Read current directory error. " EXIT THEN 
  ( memaddr dirclusnum )
   USBFSCLUSBUFF 
  ( memaddr dirclusnum addrEntry )
   BEGIN
     DUP C@ 0= IF DROP 2DROP FALSE EXIT THEN 
     DUP C@ 0E5 <> 
     IF 
       DUP 0B + C@ 0F <>
     ( memaddr dirclusnum addrEntry flag )
       IF 
         DUP 0B + C@ 010 AND 0= 
         IF 
           USBFSNAMEENTRIESCNT @ 0= 
           IF DUP USBFSCPSFN USBFSCMPSFN 
           ELSE USBFSCMPLFN 
           THEN
           0 USBFSNAMEENTRIESCNT ! 
           IF
             NIP
            ( memaddr addrEntry )
             DUP 014 + W@ 010 LSHIFT OVER 01A + W@ OR 0FFFFFFF AND 
            ( memaddr addrEntry fileclusnum )
             SWAP 01C + @  
            ( memaddr fileclusnum filesize )
             OVER 0= OVER 0= OR IF DROP 2DROP TRUE EXIT THEN 
             ROT ROT 
            ( filesize memaddr fileclusnum )
             USBFSRDFL ( filesize flag ) 
             IF TRUE 
             ELSE DROP 0 FALSE 
             THEN EXIT
           THEN 
         THEN
       ELSE 
         DUP C@ 6 AND 0<> IF 0 USBFSNAMEENTRIESCNT ! THEN 
         DUP USBFSCPLFN 
       THEN 
     THEN 
    ( memaddr clusNum addrEntry )
     USBFSINCENTRY 
     IF 
       DUP 0= 
       IF DROP 2DROP TRUE EXIT THEN 
     ELSE DROP FALSE EXIT 
     THEN 
   AGAIN ;


